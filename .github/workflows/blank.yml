# This is a basic workflow to help you get started with Actions

name: Moj pierwszy przeplyw

# Controls when the workflow will run
#on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#  schedule:
#    - cron: '*/2 * * * *'
on:
  workflow_dispatch:
    inputs:  
     WyborKlienta:
       description: 'Nasz Klient'
       required: true
       default: "Contoso"
       type: choice
       options:
          - Contoso
          - Arcacorp
          - Nwtraders
     nazwa_operatora:
        description: "Twoje imie i i nazwisko"
        required: false
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  moje_pierwsze_zadanie:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      # --- USTAWIENIA NFTABLES ---
      NFT_FILE: nftables-1.0.6.1.tar.xz
      NFT_URL: https://www.netfilter.org/projects/nftables/files/nftables-1.0.6.1.tar.xz
      # katalog trzymany w cache (względem workspace)
      NFT_DIR: ${{ github.workspace }}/.cache/nftables
      # klucz cache; zmień przy aktualizacji wersji/URL
      NFT_CACHE_KEY: nftables-1.0.6.1-${{ runner.os }}

      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Sprawdzamy wersję Python
        run: python3 -V

      - name: Wyswietl aktualny katalog roboczy
        run: pwd

      - name: Wyswietl listę plikow
        run: ls -la
  

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4


      # ====== CACHE NFTABLES ======
      - name: Przygotuj katalog cache
        run: mkdir -p "$NFT_DIR"

      - name: Przywróć cache dla nftables
        id: cache-nft
        uses: actions/cache@v4
        with:
          path: .cache/nftables
          key: ${{ env.NFT_CACHE_KEY }}
          restore-keys: |
            nftables-

      - name: Pobierz nftables (jeśli brak w cache)
        if: steps.cache-nft.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss – pobieram: $NFT_URL"
          curl -fL "$NFT_URL" -o "$NFT_DIR/$NFT_FILE"
          echo "Pobrano: $NFT_DIR/$NFT_FILE"
          ls -lh "$NFT_DIR"

      - name: Potwierdź plik w cache
        run: |
          test -f "$NFT_DIR/$NFT_FILE" || { echo "Brak $NFT_FILE po próbie pobrania!"; exit 1; }
          echo "Plik w cache OK:"
          ls -lh "$NFT_DIR/$NFT_FILE"
          

      
      - name: Wyswietl listę plikow
        run: ls -lRa

      - name: testujemy zmienne input
        run: |
          echo "Wybrałeś klienta: $KLIENT"
          echo "Podane imię i nazwisko: ${{ inputs.nazwa_operatora }}"
        env:
          KLIENT: ${{ inputs.wybor_klienta }}



